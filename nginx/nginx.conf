# nginx/nginx.conf

# Worker processes; auto akan menyesuaikan dengan jumlah core CPU
worker_processes auto;

events {
    worker_connections 1024; # Jumlah koneksi per worker
}

http {
    # Definisikan upstream server untuk aplikasi web Node.js
    # Ini akan menjadi tempat Nginx mengirimkan request
    upstream app_web_servers {
        # Least connections direkomendasikan untuk distribusi yang lebih baik
        # jika koneksi memiliki durasi yang bervariasi.
        # Untuk round-robin sederhana, cukup daftarkan server.
        # least_conn; 
        
        # Nama service 'app-web' dari docker-compose.yml dan port internalnya
        # Kita akan buat 2 instance aplikasi web
        server app-web-1:3001; # Instance 1, port internal 3001
        server app-web-2:3001; # Instance 2, port internal 3001
    }

    server {
        listen 80; # Nginx akan listen di port 80
        server_name localhost; # atau domain Anda

        location / {
            # Proxy pass ke upstream server yang telah didefinisikan
            proxy_pass http://app_web_servers;
            
            # Header penting untuk di-forward ke aplikasi backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Pengaturan untuk WebSocket jika dibutuhkan (tidak dalam kasus ini)
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
        }

        # Opsional: Pengaturan untuk caching file statis jika disajikan oleh Nginx
        # location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg)$ {
        #     proxy_pass http://app_web_servers; # Atau root ke direktori statis jika Nginx menyajikannya langsung
        #     expires 1d; # Cache selama 1 hari
        #     add_header Cache-Control "public";
        # }

        # Health check endpoint untuk Nginx (opsional, bisa digunakan oleh sistem monitoring eksternal)
        location /nginx_health {
            return 200 "Nginx is healthy\n";
            access_log off; # Matikan logging untuk health check
        }
    }
}
